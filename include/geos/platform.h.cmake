/**********************************************************************
 *
 * platform.h - generated by CMake from platform.h.cmake
 *
 * GEOS - Geometry Engine Open Source
 * http://geos.osgeo.org
 *
 * Copyright (C) 2009 Mateusz Loskot
 * Copyright (C) 2005-2009 Refractions Research Inc.
 * Copyright (C) 2001-2009 Vivid Solutions Inc.
 *
 * This is free software; you can redistribute and/or modify it under
 * the terms of the GNU Lesser General Public Licence as published
 * by the Free Software Foundation.
 * See the COPYING file for more information.
 *
 *********************************************************************/

#pragma once

#include <cinttypes>
#include <limits>

/* Set to 1 if you have `int64_t' type */
#cmakedefine HAVE_INT64_T_64 1

/* Set to 1 if `long int' is 64 bits */
#cmakedefine HAVE_LONG_INT_64 1

/* Set to 1 if `long long int' is 64 bits */
#cmakedefine HAVE_LONG_LONG_INT_64 1

/* Set to 1 if you have ieeefp.h */
#cmakedefine HAVE_IEEEFP_H 1



#ifdef HAVE_INT64_T_64
# ifdef _MSC_VER
typedef __int64 int64;
# else
typedef int64_t int64;
# endif
#else
# ifdef HAVE_LONG_LONG_INT_64
typedef long long int int64;
# else
typedef long int int64;
#  ifndef HAVE_LONG_INT_64
#   define INT64_IS_REALLY32 1
#   warning "Could not find 64bit integer definition!"
#  endif
# endif
#endif



#if defined(_MSC_VER) && _MSC_VER >= 1200 // VC++ 6.0 and above
#  include <float.h>
#  ifndef FINITE
#    define FINITE(x) _finite(x)
#  endif
#  ifndef ISNAN
#    define ISNAN(x) _isnan(x)
#  endif
#elif !defined(HAVE_IEEEFP_H)
#  include <cmath>
#  ifndef FINITE
#    define FINITE(x) std::isfinite(x)
#  endif
#  ifndef ISNAN
#    define ISNAN(x) std::isnan(x)
#  endif
#else
#  include <ieeefp.h>
#  ifndef FINITE
#    define FINITE(x) finite(x)
#  endif
#  ifndef ISNAN
#    define ISNAN(x) isnan(x)
#  endif
#endif



// Defines NaN for Intel platforms
constexpr double DoubleNotANumber = std::numeric_limits<double>::quiet_NaN();

// Some handy constants
constexpr double DoubleMax = (std::numeric_limits<double>::max)();
constexpr double DoubleInfinity = (std::numeric_limits<double>::infinity)();
constexpr double DoubleNegInfinity = (-(std::numeric_limits<double>::infinity)());

